"use strict";
/*
In NativeScript, a file with the same name as an XML file is known as
a code-behind file. The code-behind is a great place to place your view
logic, and to set up your pageâ€™s data binding.
*/
Object.defineProperty(exports, "__esModule", { value: true });
var home_view_model_1 = require("./home-view-model");
var observable_1 = require("tns-core-modules/data/observable");
var page;
var model;
function onNavigatingTo(args) {
    page = args.object;
    model = new home_view_model_1.HomeViewModel(page);
    page.bindingContext = loadList();
    var listView = page.getViewById("homeList");
    page.bindingContext.homeListItems.push({ title: "Game of Thrones" });
    // Manually trigger the update so that the new color is shown.
    listView.refresh();
}
exports.onNavigatingTo = onNavigatingTo;
function loadList() {
    return observable_1.fromObject({
        // Setting the listview binding source
        homeListItems: [
            { title: "The Da Vinci Code" },
            { title: "Harry Potter and the Chamber of Secrets" },
            { title: "The Alchemist" },
            { title: "The Godfather" },
            { title: "Goodnight Moon" },
            { title: "The Hobbit" }
        ]
    });
}
exports.loadList = loadList;
function onListViewLoaded(args) {
    var listView = args.object;
}
exports.onListViewLoaded = onListViewLoaded;
function onItemTap(args) {
    var index = args.index;
    console.log("Second ListView item tap " + index);
}
exports.onItemTap = onItemTap;
function onTapHome(args) {
    var button = args.object;
    console.log("home");
    model.switchPage(home_view_model_1.pageState.Home);
}
exports.onTapHome = onTapHome;
function onTapAdventure(args) {
    var button = args.object;
    console.log("adventure");
    model.switchPage(home_view_model_1.pageState.Adventure);
}
exports.onTapAdventure = onTapAdventure;
function onTapEnemy(args) {
    var button = args.object;
    console.log("enemy");
    model.switchPage(home_view_model_1.pageState.Enemy);
}
exports.onTapEnemy = onTapEnemy;
function onTapTabern(args) {
    var button = args.object;
    console.log("tabern");
    model.switchPage(home_view_model_1.pageState.Tabern);
}
exports.onTapTabern = onTapTabern;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9tZS1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaG9tZS1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7OztFQUlFOztBQUdGLHFEQUE2RDtBQUM3RCwrREFBeUU7QUFJekUsSUFBSSxJQUFVLENBQUE7QUFDZCxJQUFJLEtBQW9CLENBQUE7QUFFeEIsd0JBQStCLElBQW1CO0lBQzlDLElBQUksR0FBUyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3pCLEtBQUssR0FBRyxJQUFJLCtCQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDaEMsSUFBSSxDQUFDLGNBQWMsR0FBRyxRQUFRLEVBQUUsQ0FBQztJQUVqQyxJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFXLFVBQVUsQ0FBQyxDQUFDO0lBQ3hELElBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxpQkFBaUIsRUFBRSxDQUFDLENBQUM7SUFDckUsOERBQThEO0lBQzlELFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUN2QixDQUFDO0FBVEQsd0NBU0M7QUFFRDtJQUNJLE1BQU0sQ0FBQyx1QkFBVSxDQUFDO1FBQ2Qsc0NBQXNDO1FBQ3RDLGFBQWEsRUFBRTtZQUNYLEVBQUUsS0FBSyxFQUFFLG1CQUFtQixFQUFFO1lBQzlCLEVBQUUsS0FBSyxFQUFFLHlDQUF5QyxFQUFFO1lBQ3BELEVBQUUsS0FBSyxFQUFFLGVBQWUsRUFBRTtZQUMxQixFQUFFLEtBQUssRUFBRSxlQUFlLEVBQUU7WUFDMUIsRUFBRSxLQUFLLEVBQUUsZ0JBQWdCLEVBQUU7WUFDM0IsRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFO1NBQzFCO0tBQ0osQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQVpELDRCQVlDO0FBRUQsMEJBQWlDLElBQWU7SUFDNUMsSUFBTSxRQUFRLEdBQWEsSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUMzQyxDQUFDO0FBRkQsNENBRUM7QUFFRCxtQkFBMEIsSUFBbUI7SUFDekMsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUN6QixPQUFPLENBQUMsR0FBRyxDQUFDLDhCQUE0QixLQUFPLENBQUMsQ0FBQztBQUNyRCxDQUFDO0FBSEQsOEJBR0M7QUFFRCxtQkFBMEIsSUFBZTtJQUNyQyxJQUFNLE1BQU0sR0FBVyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ25DLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDbkIsS0FBSyxDQUFDLFVBQVUsQ0FBQywyQkFBUyxDQUFDLElBQUksQ0FBQyxDQUFBO0FBQ3BDLENBQUM7QUFKRCw4QkFJQztBQUNELHdCQUErQixJQUFlO0lBQzFDLElBQU0sTUFBTSxHQUFXLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDbkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUN4QixLQUFLLENBQUMsVUFBVSxDQUFDLDJCQUFTLENBQUMsU0FBUyxDQUFDLENBQUE7QUFDekMsQ0FBQztBQUpELHdDQUlDO0FBQ0Qsb0JBQTJCLElBQWU7SUFDdEMsSUFBTSxNQUFNLEdBQVcsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNuQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQ3BCLEtBQUssQ0FBQyxVQUFVLENBQUMsMkJBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUNyQyxDQUFDO0FBSkQsZ0NBSUM7QUFDRCxxQkFBNEIsSUFBZTtJQUN2QyxJQUFNLE1BQU0sR0FBVyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ25DLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDckIsS0FBSyxDQUFDLFVBQVUsQ0FBQywyQkFBUyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBQ3RDLENBQUM7QUFKRCxrQ0FJQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5JbiBOYXRpdmVTY3JpcHQsIGEgZmlsZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgYW4gWE1MIGZpbGUgaXMga25vd24gYXNcbmEgY29kZS1iZWhpbmQgZmlsZS4gVGhlIGNvZGUtYmVoaW5kIGlzIGEgZ3JlYXQgcGxhY2UgdG8gcGxhY2UgeW91ciB2aWV3XG5sb2dpYywgYW5kIHRvIHNldCB1cCB5b3VyIHBhZ2XigJlzIGRhdGEgYmluZGluZy5cbiovXG5cbmltcG9ydCB7IE5hdmlnYXRlZERhdGEsIFBhZ2UgfSBmcm9tIFwidWkvcGFnZVwiO1xuaW1wb3J0IHsgSG9tZVZpZXdNb2RlbCwgcGFnZVN0YXRlIH0gZnJvbSBcIi4vaG9tZS12aWV3LW1vZGVsXCI7XG5pbXBvcnQgeyBFdmVudERhdGEsIGZyb21PYmplY3QgfSBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy9kYXRhL29ic2VydmFibGVcIjtcbmltcG9ydCB7IExpc3RWaWV3LCBJdGVtRXZlbnREYXRhIH0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvdWkvbGlzdC12aWV3XCI7XG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tIFwidWkvYnV0dG9uXCI7XG5cbmxldCBwYWdlOiBQYWdlXG5sZXQgbW9kZWw6IEhvbWVWaWV3TW9kZWxcblxuZXhwb3J0IGZ1bmN0aW9uIG9uTmF2aWdhdGluZ1RvKGFyZ3M6IE5hdmlnYXRlZERhdGEpIHtcbiAgICBwYWdlID0gPFBhZ2U+YXJncy5vYmplY3Q7XG4gICAgbW9kZWwgPSBuZXcgSG9tZVZpZXdNb2RlbChwYWdlKTtcbiAgICBwYWdlLmJpbmRpbmdDb250ZXh0ID0gbG9hZExpc3QoKTtcbiAgICBcbiAgICBjb25zdCBsaXN0VmlldyA9IHBhZ2UuZ2V0Vmlld0J5SWQ8TGlzdFZpZXc+KFwiaG9tZUxpc3RcIik7XG4gICAgcGFnZS5iaW5kaW5nQ29udGV4dC5ob21lTGlzdEl0ZW1zLnB1c2goeyB0aXRsZTogXCJHYW1lIG9mIFRocm9uZXNcIiB9KTtcbiAgICAvLyBNYW51YWxseSB0cmlnZ2VyIHRoZSB1cGRhdGUgc28gdGhhdCB0aGUgbmV3IGNvbG9yIGlzIHNob3duLlxuICAgIGxpc3RWaWV3LnJlZnJlc2goKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRMaXN0KCkge1xuICAgIHJldHVybiBmcm9tT2JqZWN0KHtcbiAgICAgICAgLy8gU2V0dGluZyB0aGUgbGlzdHZpZXcgYmluZGluZyBzb3VyY2VcbiAgICAgICAgaG9tZUxpc3RJdGVtczogW1xuICAgICAgICAgICAgeyB0aXRsZTogXCJUaGUgRGEgVmluY2kgQ29kZVwiIH0sXG4gICAgICAgICAgICB7IHRpdGxlOiBcIkhhcnJ5IFBvdHRlciBhbmQgdGhlIENoYW1iZXIgb2YgU2VjcmV0c1wiIH0sXG4gICAgICAgICAgICB7IHRpdGxlOiBcIlRoZSBBbGNoZW1pc3RcIiB9LFxuICAgICAgICAgICAgeyB0aXRsZTogXCJUaGUgR29kZmF0aGVyXCIgfSxcbiAgICAgICAgICAgIHsgdGl0bGU6IFwiR29vZG5pZ2h0IE1vb25cIiB9LFxuICAgICAgICAgICAgeyB0aXRsZTogXCJUaGUgSG9iYml0XCIgfVxuICAgICAgICBdXG4gICAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvbkxpc3RWaWV3TG9hZGVkKGFyZ3M6IEV2ZW50RGF0YSkge1xuICAgIGNvbnN0IGxpc3RWaWV3ID0gPExpc3RWaWV3PmFyZ3Mub2JqZWN0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb25JdGVtVGFwKGFyZ3M6IEl0ZW1FdmVudERhdGEpIHtcbiAgICBjb25zdCBpbmRleCA9IGFyZ3MuaW5kZXg7XG4gICAgY29uc29sZS5sb2coYFNlY29uZCBMaXN0VmlldyBpdGVtIHRhcCAke2luZGV4fWApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb25UYXBIb21lKGFyZ3M6IEV2ZW50RGF0YSkge1xuICAgIGNvbnN0IGJ1dHRvbiA9IDxCdXR0b24+YXJncy5vYmplY3Q7XG4gICAgY29uc29sZS5sb2coXCJob21lXCIpXG4gICAgbW9kZWwuc3dpdGNoUGFnZShwYWdlU3RhdGUuSG9tZSlcbn1cbmV4cG9ydCBmdW5jdGlvbiBvblRhcEFkdmVudHVyZShhcmdzOiBFdmVudERhdGEpIHtcbiAgICBjb25zdCBidXR0b24gPSA8QnV0dG9uPmFyZ3Mub2JqZWN0O1xuICAgIGNvbnNvbGUubG9nKFwiYWR2ZW50dXJlXCIpXG4gICAgbW9kZWwuc3dpdGNoUGFnZShwYWdlU3RhdGUuQWR2ZW50dXJlKVxufVxuZXhwb3J0IGZ1bmN0aW9uIG9uVGFwRW5lbXkoYXJnczogRXZlbnREYXRhKSB7XG4gICAgY29uc3QgYnV0dG9uID0gPEJ1dHRvbj5hcmdzLm9iamVjdDtcbiAgICBjb25zb2xlLmxvZyhcImVuZW15XCIpXG4gICAgbW9kZWwuc3dpdGNoUGFnZShwYWdlU3RhdGUuRW5lbXkpXG59XG5leHBvcnQgZnVuY3Rpb24gb25UYXBUYWJlcm4oYXJnczogRXZlbnREYXRhKSB7XG4gICAgY29uc3QgYnV0dG9uID0gPEJ1dHRvbj5hcmdzLm9iamVjdDtcbiAgICBjb25zb2xlLmxvZyhcInRhYmVyblwiKVxuICAgIG1vZGVsLnN3aXRjaFBhZ2UocGFnZVN0YXRlLlRhYmVybilcbn0iXX0=