"use strict";
/*
In NativeScript, a file with the same name as an XML file is known as
a code-behind file. The code-behind is a great place to place your view
logic, and to set up your pageâ€™s data binding.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const home_view_model_1 = require("./home-view-model");
const observable_1 = require("tns-core-modules/data/observable");
let page;
let model;
function onNavigatingTo(args) {
    page = args.object;
    model = new home_view_model_1.HomeViewModel(page);
    page.bindingContext = loadList();
    const listView = page.getViewById("homeList");
    page.bindingContext.homeListItems.push({ title: "Game of Thrones" });
    // Manually trigger the update so that the new color is shown.
    listView.refresh();
}
exports.onNavigatingTo = onNavigatingTo;
function loadList() {
    return observable_1.fromObject({
        // Setting the listview binding source
        homeListItems: [
            { title: "The Da Vinci Code" },
            { title: "Harry Potter and the Chamber of Secrets" },
            { title: "The Alchemist" },
            { title: "The Godfather" },
            { title: "Goodnight Moon" },
            { title: "The Hobbit" }
        ]
    });
}
exports.loadList = loadList;
function onListViewLoaded(args) {
    const listView = args.object;
}
exports.onListViewLoaded = onListViewLoaded;
function onItemTap(args) {
    const index = args.index;
    console.log(`Second ListView item tap ${index}`);
}
exports.onItemTap = onItemTap;
function onTapHome(args) {
    const button = args.object;
    console.log("home");
    model.switchPage(home_view_model_1.PageState.Home);
}
exports.onTapHome = onTapHome;
function onTapAdventure(args) {
    const button = args.object;
    console.log("adventure");
    model.switchPage(home_view_model_1.PageState.Adventure);
}
exports.onTapAdventure = onTapAdventure;
function onTapEncounter(args) {
    const button = args.object;
    console.log("encounter");
    model.switchPage(home_view_model_1.PageState.Encounter);
}
exports.onTapEncounter = onTapEncounter;
function onTapTabern(args) {
    const button = args.object;
    console.log("tabern");
    model.switchPage(home_view_model_1.PageState.Tabern);
}
exports.onTapTabern = onTapTabern;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9tZS1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaG9tZS1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7OztFQUlFOztBQUdGLHVEQUE0RDtBQUM1RCxpRUFBd0U7QUFJeEUsSUFBSSxJQUFVLENBQUE7QUFDZCxJQUFJLEtBQW9CLENBQUE7QUFFeEIsd0JBQStCLElBQW1CO0lBQzlDLElBQUksR0FBUyxJQUFJLENBQUMsTUFBTSxDQUFBO0lBQ3hCLEtBQUssR0FBRyxJQUFJLCtCQUFhLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDL0IsSUFBSSxDQUFDLGNBQWMsR0FBRyxRQUFRLEVBQUUsQ0FBQTtJQUVoQyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFXLFVBQVUsQ0FBQyxDQUFBO0lBQ3ZELElBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxpQkFBaUIsRUFBRSxDQUFDLENBQUE7SUFDcEUsOERBQThEO0lBQzlELFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtBQUN0QixDQUFDO0FBVEQsd0NBU0M7QUFFRDtJQUNJLE1BQU0sQ0FBQyx1QkFBVSxDQUFDO1FBQ2Qsc0NBQXNDO1FBQ3RDLGFBQWEsRUFBRTtZQUNYLEVBQUUsS0FBSyxFQUFFLG1CQUFtQixFQUFFO1lBQzlCLEVBQUUsS0FBSyxFQUFFLHlDQUF5QyxFQUFFO1lBQ3BELEVBQUUsS0FBSyxFQUFFLGVBQWUsRUFBRTtZQUMxQixFQUFFLEtBQUssRUFBRSxlQUFlLEVBQUU7WUFDMUIsRUFBRSxLQUFLLEVBQUUsZ0JBQWdCLEVBQUU7WUFDM0IsRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFO1NBQzFCO0tBQ0osQ0FBQyxDQUFBO0FBQ04sQ0FBQztBQVpELDRCQVlDO0FBRUQsMEJBQWlDLElBQWU7SUFDNUMsTUFBTSxRQUFRLEdBQWEsSUFBSSxDQUFDLE1BQU0sQ0FBQTtBQUMxQyxDQUFDO0FBRkQsNENBRUM7QUFFRCxtQkFBMEIsSUFBbUI7SUFDekMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQTtJQUN4QixPQUFPLENBQUMsR0FBRyxDQUFDLDRCQUE0QixLQUFLLEVBQUUsQ0FBQyxDQUFBO0FBQ3BELENBQUM7QUFIRCw4QkFHQztBQUVELG1CQUEwQixJQUFlO0lBQ3JDLE1BQU0sTUFBTSxHQUFXLElBQUksQ0FBQyxNQUFNLENBQUE7SUFDbEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUNuQixLQUFLLENBQUMsVUFBVSxDQUFDLDJCQUFTLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDcEMsQ0FBQztBQUpELDhCQUlDO0FBQ0Qsd0JBQStCLElBQWU7SUFDMUMsTUFBTSxNQUFNLEdBQVcsSUFBSSxDQUFDLE1BQU0sQ0FBQTtJQUNsQyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFBO0lBQ3hCLEtBQUssQ0FBQyxVQUFVLENBQUMsMkJBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQTtBQUN6QyxDQUFDO0FBSkQsd0NBSUM7QUFDRCx3QkFBK0IsSUFBZTtJQUMxQyxNQUFNLE1BQU0sR0FBVyxJQUFJLENBQUMsTUFBTSxDQUFBO0lBQ2xDLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUE7SUFDeEIsS0FBSyxDQUFDLFVBQVUsQ0FBQywyQkFBUyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0FBQ3pDLENBQUM7QUFKRCx3Q0FJQztBQUNELHFCQUE0QixJQUFlO0lBQ3ZDLE1BQU0sTUFBTSxHQUFXLElBQUksQ0FBQyxNQUFNLENBQUE7SUFDbEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUNyQixLQUFLLENBQUMsVUFBVSxDQUFDLDJCQUFTLENBQUMsTUFBTSxDQUFDLENBQUE7QUFDdEMsQ0FBQztBQUpELGtDQUlDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkluIE5hdGl2ZVNjcmlwdCwgYSBmaWxlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBhbiBYTUwgZmlsZSBpcyBrbm93biBhc1xuYSBjb2RlLWJlaGluZCBmaWxlLiBUaGUgY29kZS1iZWhpbmQgaXMgYSBncmVhdCBwbGFjZSB0byBwbGFjZSB5b3VyIHZpZXdcbmxvZ2ljLCBhbmQgdG8gc2V0IHVwIHlvdXIgcGFnZeKAmXMgZGF0YSBiaW5kaW5nLlxuKi9cblxuaW1wb3J0IHsgTmF2aWdhdGVkRGF0YSwgUGFnZSB9IGZyb20gXCJ1aS9wYWdlXCJcbmltcG9ydCB7IEhvbWVWaWV3TW9kZWwsIFBhZ2VTdGF0ZSB9IGZyb20gXCIuL2hvbWUtdmlldy1tb2RlbFwiXG5pbXBvcnQgeyBFdmVudERhdGEsIGZyb21PYmplY3QgfSBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy9kYXRhL29ic2VydmFibGVcIlxuaW1wb3J0IHsgTGlzdFZpZXcsIEl0ZW1FdmVudERhdGEgfSBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy91aS9saXN0LXZpZXdcIlxuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSBcInVpL2J1dHRvblwiXG5cbmxldCBwYWdlOiBQYWdlXG5sZXQgbW9kZWw6IEhvbWVWaWV3TW9kZWxcblxuZXhwb3J0IGZ1bmN0aW9uIG9uTmF2aWdhdGluZ1RvKGFyZ3M6IE5hdmlnYXRlZERhdGEpIHtcbiAgICBwYWdlID0gPFBhZ2U+YXJncy5vYmplY3RcbiAgICBtb2RlbCA9IG5ldyBIb21lVmlld01vZGVsKHBhZ2UpXG4gICAgcGFnZS5iaW5kaW5nQ29udGV4dCA9IGxvYWRMaXN0KClcbiAgICBcbiAgICBjb25zdCBsaXN0VmlldyA9IHBhZ2UuZ2V0Vmlld0J5SWQ8TGlzdFZpZXc+KFwiaG9tZUxpc3RcIilcbiAgICBwYWdlLmJpbmRpbmdDb250ZXh0LmhvbWVMaXN0SXRlbXMucHVzaCh7IHRpdGxlOiBcIkdhbWUgb2YgVGhyb25lc1wiIH0pXG4gICAgLy8gTWFudWFsbHkgdHJpZ2dlciB0aGUgdXBkYXRlIHNvIHRoYXQgdGhlIG5ldyBjb2xvciBpcyBzaG93bi5cbiAgICBsaXN0Vmlldy5yZWZyZXNoKClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRMaXN0KCkge1xuICAgIHJldHVybiBmcm9tT2JqZWN0KHtcbiAgICAgICAgLy8gU2V0dGluZyB0aGUgbGlzdHZpZXcgYmluZGluZyBzb3VyY2VcbiAgICAgICAgaG9tZUxpc3RJdGVtczogW1xuICAgICAgICAgICAgeyB0aXRsZTogXCJUaGUgRGEgVmluY2kgQ29kZVwiIH0sXG4gICAgICAgICAgICB7IHRpdGxlOiBcIkhhcnJ5IFBvdHRlciBhbmQgdGhlIENoYW1iZXIgb2YgU2VjcmV0c1wiIH0sXG4gICAgICAgICAgICB7IHRpdGxlOiBcIlRoZSBBbGNoZW1pc3RcIiB9LFxuICAgICAgICAgICAgeyB0aXRsZTogXCJUaGUgR29kZmF0aGVyXCIgfSxcbiAgICAgICAgICAgIHsgdGl0bGU6IFwiR29vZG5pZ2h0IE1vb25cIiB9LFxuICAgICAgICAgICAgeyB0aXRsZTogXCJUaGUgSG9iYml0XCIgfVxuICAgICAgICBdXG4gICAgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uTGlzdFZpZXdMb2FkZWQoYXJnczogRXZlbnREYXRhKSB7XG4gICAgY29uc3QgbGlzdFZpZXcgPSA8TGlzdFZpZXc+YXJncy5vYmplY3Rcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uSXRlbVRhcChhcmdzOiBJdGVtRXZlbnREYXRhKSB7XG4gICAgY29uc3QgaW5kZXggPSBhcmdzLmluZGV4XG4gICAgY29uc29sZS5sb2coYFNlY29uZCBMaXN0VmlldyBpdGVtIHRhcCAke2luZGV4fWApXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvblRhcEhvbWUoYXJnczogRXZlbnREYXRhKSB7XG4gICAgY29uc3QgYnV0dG9uID0gPEJ1dHRvbj5hcmdzLm9iamVjdFxuICAgIGNvbnNvbGUubG9nKFwiaG9tZVwiKVxuICAgIG1vZGVsLnN3aXRjaFBhZ2UoUGFnZVN0YXRlLkhvbWUpXG59XG5leHBvcnQgZnVuY3Rpb24gb25UYXBBZHZlbnR1cmUoYXJnczogRXZlbnREYXRhKSB7XG4gICAgY29uc3QgYnV0dG9uID0gPEJ1dHRvbj5hcmdzLm9iamVjdFxuICAgIGNvbnNvbGUubG9nKFwiYWR2ZW50dXJlXCIpXG4gICAgbW9kZWwuc3dpdGNoUGFnZShQYWdlU3RhdGUuQWR2ZW50dXJlKVxufVxuZXhwb3J0IGZ1bmN0aW9uIG9uVGFwRW5jb3VudGVyKGFyZ3M6IEV2ZW50RGF0YSkge1xuICAgIGNvbnN0IGJ1dHRvbiA9IDxCdXR0b24+YXJncy5vYmplY3RcbiAgICBjb25zb2xlLmxvZyhcImVuY291bnRlclwiKVxuICAgIG1vZGVsLnN3aXRjaFBhZ2UoUGFnZVN0YXRlLkVuY291bnRlcilcbn1cbmV4cG9ydCBmdW5jdGlvbiBvblRhcFRhYmVybihhcmdzOiBFdmVudERhdGEpIHtcbiAgICBjb25zdCBidXR0b24gPSA8QnV0dG9uPmFyZ3Mub2JqZWN0XG4gICAgY29uc29sZS5sb2coXCJ0YWJlcm5cIilcbiAgICBtb2RlbC5zd2l0Y2hQYWdlKFBhZ2VTdGF0ZS5UYWJlcm4pXG59Il19